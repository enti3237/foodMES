# import the necessary packages
from imutils.perspective import four_point_transform
from imutils import contours
import imutils
import cv2
import numpy as np
# define the dictionary of digit segments so we can identify
# each digit on the thermostat
DIGITS_LOOKUP = {
	(1, 1, 1, 0, 1, 1, 1): 0,
	(0, 0, 1, 0, 0, 1, 0): 1,
	(1, 0, 1, 1, 1, 0, 1): 2,
	(1, 0, 1, 1, 0, 1, 1): 3,
	(0, 1, 1, 1, 0, 1, 0): 4,
	(1, 1, 0, 1, 0, 1, 1): 5,
	(1, 1, 0, 1, 1, 1, 1): 6,
	(1, 0, 1, 0, 0, 1, 0): 7,
	(1, 1, 1, 1, 1, 1, 1): 8,
	(1, 1, 1, 1, 0, 1, 1): 9,
    (1, 0, 0, 1, 0, 0, 1): 9
}

# load the example image
image = cv2.imread("TEST.PNG")
# pre-process the image by resizing it, converting it to
# graycale, blurring it, and computing an edge map
image = imutils.resize(image, height=500)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)
edged = cv2.Canny(blurred, 50, 200, 255)

# find contours in the edge map, then sort them by their
# size in descending order
cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL,
	cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
cnts = sorted(cnts, key=cv2.contourArea, reverse=True)
displayCnt = None

# loop over the contours
for c in cnts:
    # approximate the contour
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.02 * peri, True)
    # if the contour has four vertices, then we have found
    # the thermostat display
    if len(approx) == 4:
        displayCnt = approx
        break
	    
# extract the thermostat display, apply a perspective transform
# to it
warped = four_point_transform(gray, displayCnt.reshape(4, 2))
output = four_point_transform(image, displayCnt.reshape(4, 2))

#평행성 유지 이미지변환에 필요정보 초기화
rows, cols, ch = output.shape

# threshold the warped image, then apply a series of morphological
# operations to cleanup the thresholded image
thresh = cv2.threshold(warped, 0, 255,
                       cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]

'''
#두께 줄이기
kernel = np.ones((5, 5), np.uint8)
thresh = cv2.erode(thresh, kernel, iterations = 1)
'''

#평행선 유지 수직으로 변환
pts1 = np.float32([[20,10],[50,10],[20,95]])
pts2 = np.float32([[13,10],[33,10],[20,95]])

cv2.circle(output, (20,10), 2, (255,0,0),-1)
cv2.circle(output, (50,10), 2, (0,255,0),-1)
cv2.circle(output, (20,95), 2, (0,0,255),-1)

M = cv2.getAffineTransform(pts1, pts2)

thresh = cv2.warpAffine(thresh, M, (cols,rows))
output = cv2.warpAffine(output, M, (cols,rows))



# find contours in the thresholded image, then initialize the
# digit contours lists
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
                        cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
digitCnts = []


# loop over the digit area candidates
for c in cnts:
    # compute the bounding box of the contour
    (x, y, w, h) = cv2.boundingRect(c)
	
    # if the contour is sufficiently large, it must be a digit
    if w >= 15 and (h >= 30 and h <= 100):
        digitCnts.append(c)

    


digitCnts = contours.sort_contours(digitCnts,
                                   method="left-to-right")[0]
digits = []


#2번째 숫자 점영역을 제거 하기위해
#1번째 x축 값을 저장해서
#2번째 x축 값으로 사용
count = 0
first_w = 0

# loop over each of the digits
for c in digitCnts:
    # extract the digit ROI
    (x, y, w, h) = cv2.boundingRect(c)
    
    if count == 0:
        first_w = w
    if count == 1:
        w = first_w
		
    roi = thresh[y:y + h, x:x + w]
	# compute the width and height of each of the 7 segments
	# we are going to examine
    (roiH, roiW) = roi.shape
    (dW, dH) = (int(roiW * 0.25), int(roiH * 0.15))
    dHC = int(roiH * 0.05)
	# define the set of 7 segments
    segments = [
		((0, 0), (w, dH)),	# top
		((0, 0), (dW, h // 2)),	# top-left
		((w - dW, 0), (w, h // 2)),	# top-right
		((0, (h // 2) - dHC) , (w, (h // 2) + dHC)), # center
		((0, h // 2), (dW, h)),	# bottom-left
		((w - dW, h // 2), (w, h)),	# bottom-right
		((0, h - dH), (w, h))	# bottom
	]
    on = [0] * len(segments)

	# loop over the segments
    for (i, ((xA, yA), (xB, yB))) in enumerate(segments):
		# extract the segment ROI, count the total number of
		# thresholded pixels in the segment, and then compute
		# the area of the segment
        segROI = roi[yA:yB, xA:xB]
        total = cv2.countNonZero(segROI)
        area = (xB - xA) * (yB - yA)
		# if the total number of non-zero pixels is greater than
		# 50% of the area, mark the segment as "on"
        if total / float(area) > 0.5:
            on[i]= 1
	# lookup the digit and draw it on the image
    digit = DIGITS_LOOKUP[tuple(on)]
    digits.append(digit)
    cv2.rectangle(output, (x, y), (x + w, y + h), (0, 255, 0), 1)
    cv2.putText(output, str(digit), (x - 10, y ),
                cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 255, 0), 2)
	
	#count값 일 증가
    count = count + 1


# display the digits
print(u"{}{}.{} \u00b0C".format(*digits))

cv2.imshow("Input", image)
cv2.imshow("Output", output)
cv2.imshow("thresh", thresh)
cv2.waitKey(0)
cv2.destroyAllWindows()
